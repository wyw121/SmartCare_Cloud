{
  "Spring Boot Controller": {
    "prefix": "sbc",
    "description": "创建Spring Boot控制器模板",
    "body": [
      "/**",
      " * ${1:模块名称}控制器",
      " * ",
      " * @author GitHub Copilot",
      " * @date ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
      " */",
      "@RestController",
      "@RequestMapping(\"/api/${2:path}\")",
      "@Api(tags = \"${1:模块名称}管理\")",
      "@Slf4j",
      "public class ${3:ClassName}Controller {",
      "",
      "    @Autowired",
      "    private ${3:ClassName}Service ${4:serviceName}Service;",
      "",
      "    @GetMapping",
      "    @ApiOperation(\"获取${1:模块名称}列表\")",
      "    public ResponseResult<PageResult<${3:ClassName}VO>> list(",
      "            @RequestParam(defaultValue = \"1\") Integer page,",
      "            @RequestParam(defaultValue = \"20\") Integer size,",
      "            ${5:QueryDTO} queryParams) {",
      "        try {",
      "            PageResult<${3:ClassName}VO> result = ${4:serviceName}Service.getPageList(page, size, queryParams);",
      "            return ResponseResult.success(result);",
      "        } catch (Exception e) {",
      "            log.error(\"获取${1:模块名称}列表失败\", e);",
      "            return ResponseResult.error(\"获取数据失败\");",
      "        }",
      "    }",
      "",
      "    @GetMapping(\"/{id}\")",
      "    @ApiOperation(\"获取${1:模块名称}详情\")",
      "    public ResponseResult<${3:ClassName}VO> getById(@PathVariable Long id) {",
      "        try {",
      "            ${3:ClassName}VO result = ${4:serviceName}Service.getById(id);",
      "            return ResponseResult.success(result);",
      "        } catch (Exception e) {",
      "            log.error(\"获取${1:模块名称}详情失败，ID：{}\", id, e);",
      "            return ResponseResult.error(\"获取数据失败\");",
      "        }",
      "    }",
      "",
      "    @PostMapping",
      "    @ApiOperation(\"新增${1:模块名称}\")",
      "    public ResponseResult<Void> create(@RequestBody @Valid ${6:CreateDTO} createDTO) {",
      "        try {",
      "            ${4:serviceName}Service.create(createDTO);",
      "            return ResponseResult.success();",
      "        } catch (Exception e) {",
      "            log.error(\"新增${1:模块名称}失败\", e);",
      "            return ResponseResult.error(\"新增失败\");",
      "        }",
      "    }",
      "",
      "    @PutMapping(\"/{id}\")",
      "    @ApiOperation(\"更新${1:模块名称}\")",
      "    public ResponseResult<Void> update(@PathVariable Long id, @RequestBody @Valid ${7:UpdateDTO} updateDTO) {",
      "        try {",
      "            ${4:serviceName}Service.update(id, updateDTO);",
      "            return ResponseResult.success();",
      "        } catch (Exception e) {",
      "            log.error(\"更新${1:模块名称}失败，ID：{}\", id, e);",
      "            return ResponseResult.error(\"更新失败\");",
      "        }",
      "    }",
      "",
      "    @DeleteMapping(\"/{id}\")",
      "    @ApiOperation(\"删除${1:模块名称}\")",
      "    public ResponseResult<Void> delete(@PathVariable Long id) {",
      "        try {",
      "            ${4:serviceName}Service.delete(id);",
      "            return ResponseResult.success();",
      "        } catch (Exception e) {",
      "            log.error(\"删除${1:模块名称}失败，ID：{}\", id, e);",
      "            return ResponseResult.error(\"删除失败\");",
      "        }",
      "    }",
      "}"
    ]
  },
  "Spring Boot Service": {
    "prefix": "sbs",
    "description": "创建Spring Boot服务类模板",
    "body": [
      "/**",
      " * ${1:模块名称}服务实现类",
      " * ",
      " * @author GitHub Copilot",
      " * @date ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
      " */",
      "@Service",
      "@Transactional",
      "@Slf4j",
      "public class ${2:ClassName}ServiceImpl implements ${2:ClassName}Service {",
      "",
      "    @Autowired",
      "    private ${2:ClassName}Mapper ${3:mapperName}Mapper;",
      "",
      "    @Override",
      "    public PageResult<${2:ClassName}VO> getPageList(Integer page, Integer size, ${4:QueryDTO} queryParams) {",
      "        try {",
      "            PageHelper.startPage(page, size);",
      "            List<${2:ClassName}> list = ${3:mapperName}Mapper.selectByCondition(queryParams);",
      "            PageInfo<${2:ClassName}> pageInfo = new PageInfo<>(list);",
      "            ",
      "            List<${2:ClassName}VO> voList = list.stream()",
      "                    .map(this::convertToVO)",
      "                    .collect(Collectors.toList());",
      "            ",
      "            return PageResult.<${2:ClassName}VO>builder()",
      "                    .total(pageInfo.getTotal())",
      "                    .page(page)",
      "                    .size(size)",
      "                    .records(voList)",
      "                    .build();",
      "        } catch (Exception e) {",
      "            log.error(\"获取${1:模块名称}分页数据失败\", e);",
      "            throw new BusinessException(\"获取数据失败\");",
      "        }",
      "    }",
      "",
      "    @Override",
      "    public ${2:ClassName}VO getById(Long id) {",
      "        ${2:ClassName} entity = ${3:mapperName}Mapper.selectByPrimaryKey(id);",
      "        if (entity == null) {",
      "            throw new BusinessException(\"${1:模块名称}不存在\");",
      "        }",
      "        return convertToVO(entity);",
      "    }",
      "",
      "    @Override",
      "    public void create(${5:CreateDTO} createDTO) {",
      "        ${2:ClassName} entity = convertToEntity(createDTO);",
      "        entity.setCreatedTime(LocalDateTime.now());",
      "        ${3:mapperName}Mapper.insert(entity);",
      "    }",
      "",
      "    @Override",
      "    public void update(Long id, ${6:UpdateDTO} updateDTO) {",
      "        ${2:ClassName} entity = ${3:mapperName}Mapper.selectByPrimaryKey(id);",
      "        if (entity == null) {",
      "            throw new BusinessException(\"${1:模块名称}不存在\");",
      "        }",
      "        ",
      "        // 更新字段",
      "        BeanUtils.copyProperties(updateDTO, entity);",
      "        entity.setUpdatedTime(LocalDateTime.now());",
      "        ${3:mapperName}Mapper.updateByPrimaryKey(entity);",
      "    }",
      "",
      "    @Override",
      "    public void delete(Long id) {",
      "        ${2:ClassName} entity = ${3:mapperName}Mapper.selectByPrimaryKey(id);",
      "        if (entity == null) {",
      "            throw new BusinessException(\"${1:模块名称}不存在\");",
      "        }",
      "        ${3:mapperName}Mapper.deleteByPrimaryKey(id);",
      "    }",
      "",
      "    private ${2:ClassName}VO convertToVO(${2:ClassName} entity) {",
      "        ${2:ClassName}VO vo = new ${2:ClassName}VO();",
      "        BeanUtils.copyProperties(entity, vo);",
      "        return vo;",
      "    }",
      "",
      "    private ${2:ClassName} convertToEntity(${5:CreateDTO} createDTO) {",
      "        ${2:ClassName} entity = new ${2:ClassName}();",
      "        BeanUtils.copyProperties(createDTO, entity);",
      "        return entity;",
      "    }",
      "}"
    ]
  },
  "JPA Entity": {
    "prefix": "jpa",
    "description": "创建JPA实体类模板",
    "body": [
      "/**",
      " * ${1:实体描述}",
      " * ",
      " * @author GitHub Copilot",
      " * @date ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
      " */",
      "@Entity",
      "@Table(name = \"${2:table_name}\")",
      "@Data",
      "@NoArgsConstructor",
      "@AllArgsConstructor",
      "@Builder",
      "public class ${3:ClassName} {",
      "",
      "    @Id",
      "    @GeneratedValue(strategy = GenerationType.IDENTITY)",
      "    @Column(name = \"id\")",
      "    private Long id;",
      "",
      "    ${4://其他字段}",
      "",
      "    @Column(name = \"status\")",
      "    private Integer status = 1;",
      "",
      "    @Column(name = \"remark\")",
      "    private String remark;",
      "",
      "    @Column(name = \"created_by\")",
      "    private Long createdBy;",
      "",
      "    @CreationTimestamp",
      "    @Column(name = \"created_time\")",
      "    private LocalDateTime createdTime;",
      "",
      "    @Column(name = \"updated_by\")",
      "    private Long updatedBy;",
      "",
      "    @UpdateTimestamp",
      "    @Column(name = \"updated_time\")",
      "    private LocalDateTime updatedTime;",
      "}"
    ]
  },
  "Health Warning Algorithm": {
    "prefix": "hwa",
    "description": "健康预警算法模板",
    "body": [
      "/**",
      " * 健康预警检查方法",
      " * ",
      " * @param elderlyId 老人ID",
      " * @param healthRecord 健康记录",
      " * @return 预警列表",
      " */",
      "public List<HealthWarning> checkHealthIndicators(Long elderlyId, HealthRecord healthRecord) {",
      "    List<HealthWarning> warnings = new ArrayList<>();",
      "    ",
      "    // 血压检查",
      "    if (isBloodPressureAbnormal(healthRecord.getBloodPressure())) {",
      "        warnings.add(createWarning(elderlyId, WarningType.BLOOD_PRESSURE, ",
      "                \"血压异常：\" + healthRecord.getBloodPressure(), ",
      "                WarningLevel.${1:WARNING_LEVEL}));",
      "    }",
      "    ",
      "    // 心率检查",
      "    if (isHeartRateAbnormal(healthRecord.getHeartRate())) {",
      "        warnings.add(createWarning(elderlyId, WarningType.HEART_RATE,",
      "                \"心率异常：\" + healthRecord.getHeartRate(),",
      "                WarningLevel.${2:WARNING_LEVEL}));",
      "    }",
      "    ",
      "    // 血糖检查",
      "    if (isBloodSugarAbnormal(healthRecord.getBloodSugar())) {",
      "        warnings.add(createWarning(elderlyId, WarningType.BLOOD_SUGAR,",
      "                \"血糖异常：\" + healthRecord.getBloodSugar(),",
      "                WarningLevel.${3:WARNING_LEVEL}));",
      "    }",
      "    ",
      "    // 体温检查",
      "    if (isTemperatureAbnormal(healthRecord.getTemperature())) {",
      "        warnings.add(createWarning(elderlyId, WarningType.TEMPERATURE,",
      "                \"体温异常：\" + healthRecord.getTemperature(),",
      "                WarningLevel.${4:WARNING_LEVEL}));",
      "    }",
      "    ",
      "    return warnings;",
      "}",
      "",
      "private HealthWarning createWarning(Long elderlyId, WarningType type, String content, WarningLevel level) {",
      "    return HealthWarning.builder()",
      "            .elderlyId(elderlyId)",
      "            .warningType(type)",
      "            .warningLevel(level)",
      "            .warningContent(content)",
      "            .status(WarningStatus.PENDING)",
      "            .createdTime(LocalDateTime.now())",
      "            .build();",
      "}"
    ]
  }
}